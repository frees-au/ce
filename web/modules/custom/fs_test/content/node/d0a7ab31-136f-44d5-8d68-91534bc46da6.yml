_meta:
  version: '1.0'
  entity_type: node
  uuid: d0a7ab31-136f-44d5-8d68-91534bc46da6
  bundle: article
  default_langcode: en
  depends:
    fe6b7593-6461-4baa-b8b6-2a3847f090d5: media
default:
  revision_uid:
    -
      target_id: 1
  status:
    -
      value: true
  uid:
    -
      target_id: 1
  title:
    -
      value: 'Mastering machine names inside your views'
  created:
    -
      value: 1709204901
  promote:
    -
      value: true
  sticky:
    -
      value: false
  revision_translation_affected:
    -
      value: true
  path:
    -
      alias: /ce/ummm/mastering-machine-names-inside-your-views
      langcode: en
      pathauto: 1
  hero:
    -
      entity: fe6b7593-6461-4baa-b8b6-2a3847f090d5
  lead:
    -
      value: '<p>Drupal views providers an advanced UI, but sometimes the auto-generated machine names within your views are not ideal. There are ways to improve this.</p>'
      format: basic
  markup:
    -
      value: "<p><strong>This site is under development and this article is not complete.</strong></p><p>I have been creating some content for the new website and thinking about random tips that I have never found time to share.</p><p>When you create a view there are a few areas where I like to control generated \"machine name\" values that will lead to cleaner output in the long run.</p><p>I wouldn't do this after a site is built, it's too risky to overlook other things that depend on these machine names. I would only use these techniques when I initially create the view.</p><h2>The view itself</h2><p>It's common to find that your view wasn't named well, and you're unhappy with the name of the twig file to override.</p><p>The easiest way to fix this is to clone the view and customise the machine as you do it, then delete the old view. This is completely safe as views YAML is usually self-contained.</p><p>As said above, you usually do this when you are building the view and you realise you gave it a bad name. After a while there are other parts of your site which will be couple to this name, and easy to miss. If you clone a view and change the machine name you <strong>will</strong> break the following and plenty of other things:</p><ul><li>Entity reference fields (when you configure the options list) can use a View.</li><li>Your layouts builder page, where you have embedded a Views block.</li><li>Your block layout, where you have added a Views block.</li><li>Twig templates reference the Views machine name</li><li>Custom code can programmatically load and render a view.</li><li>Probably a dozen more if you count your contrib module.&nbsp;</li></ul><h2>Display names</h2><p>Below we have a view with multiple displays and they have been neatly named. If you want to control the twig for this view, you can add a template views-view--VIEWNAME--DISPLAYNAME.html.twig. After a site has been built it's common to see templates like this:</p><p>[PICTURE]</p><pre><code class=\"language-plaintext\">views-view--mycontentview--page-1.html.twig\r\nviews-view--mycontentview--page-2.html.twig\r\nviews-view--mycontentview--page-3.html.twig</code></pre><p>For another developer looking at this code, and trawling through dozens of templates, it's not immediately clear what these views are being used for. This is a DX issue for you and your colleagues. The effort to change this later may not be worth it.</p><p>Get into the habit of setting your display machine names as soon as you create them. You will appreciate the resulting systax for creating your twig templates.</p><p>[PICTURE]</p><pre><code class=\"language-plaintext\">views-view--mycontentview--all.html.twig\r\nviews-view--mycontentview--articles.html.twig\r\nviews-view--mycontentview--newest-articles.html.twig</code></pre><h2>Renaming fields</h2><p>When adding fields, it's common to add the same field twice, you might render a field in different ways or hide one of the fields and use it in a field rewrite later.</p><p>The views UI does not allow you to rename the field's machine name. However there is a technique I've been using for a while that works very well. It will allow you to have well named twig tokens. It invokes hacking the views yaml and reimporting it.</p><p>Let's say we want to re-use a <strong>uid</strong> (User ID) field, hide it and, reuse it in a field rewrite in another field.</p><ol><li>Create your view, and add your fields.</li><li>Create a second UID field.</li><li>Add a \"Global: custom text\" field</li><li>In the rewrite of this field, you will note that to express this field you will enter {{ uid_2 }} - How can we change this.</li><li>Export your site config with Drush, open the new view yaml, and find and replace the instances of <strong>uid_2</strong> with <strong>you_say_tomatoe</strong></li><li>Reimport your site config</li></ol><p>Now in your view you can use {{ you_say_tomatoe }} in your rewriting.</p><p><strong>Disclaimer #1</strong>: I've been told that I hack yaml too much. I like to explore the boundaries of Drupal's config system, it's a masterpiece. However, I'm also aware that I will get no love in the issue queue if I hose my site. That said, I have been using this technique with Views since Drupal 8 and it has never failed me.</p><p><strong>Disclaimers #2</strong>: I only do fancy twig re-writing in administration views in the backend, especially when I'm using a vanilla uncustomised backend theme. It's a great smart way to make backend tables more user-friendly. On the frontend, you should bring this complexity into the theme layer and keep your views nice and sane.</p><p>[VIDEO]</p><p>&nbsp;</p>"
      format: safe_html
  tags:
    -
      target_id: 1
    -
      target_id: 2

