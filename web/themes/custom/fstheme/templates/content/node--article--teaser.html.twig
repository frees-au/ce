{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_node()
 *
 * @ingroup themeable
 */
#}
<div class="flex flex-col h-full shadow-md hover:text-fs-red-tint relative grayscale duration-300 ease-in-out hover:grayscale-0 font-sans">
  <div class="px-[21px] pt-[16px] relative">
    <img src="{{ node.hero_banner }}" />
    <div class="absolute bottom-[16px] right-[37px]">
      {% if article_type == 'video' %}
        <svg width="23" height="27" viewBox="0 0 23 27" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M-0.00600582 26.4805L-0.00600444 0.499705L22.494 13.4901L-0.00600582 26.4805Z" fill="white"></path>
        </svg>
      {% else %}
        <svg width="38" height="29" viewBox="0 0 38 29" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M5.26951 28.4336L4.3331 27.0577C10.4243 22.8298 13.4166 18.6832 13.3099 14.6179C13.2557 12.552 12.3246 11.376 10.5164 11.09L6.42018 15.0988C5.07506 14.6673 3.85275 13.8324 2.75323 12.5941C1.58881 11.4243 0.981248 9.87299 0.930543 7.94032C0.879837 6.00766 1.60253 4.32146 3.09862 2.88172C4.59645 1.50863 6.6116 0.788868 9.14407 0.722427C11.6099 0.657734 13.6977 1.43658 15.4075 3.05896C17.0524 4.74973 17.9142 7.09461 17.9929 10.0936C18.1642 16.6247 13.9231 22.738 5.26951 28.4336ZM24.063 27.9405L23.1266 26.5646C29.2178 22.3367 32.2101 18.1901 32.1035 14.1249C32.0493 12.0589 31.1181 10.8829 29.31 10.5969L25.2137 14.6057C23.8686 14.1742 22.6463 13.3393 21.5468 12.1011C20.3823 10.9312 19.7748 9.37993 19.7241 7.44726C19.6734 5.51459 20.3961 3.82839 21.8922 2.38866C23.39 1.01557 25.4051 0.295803 27.9376 0.229361C30.4034 0.164668 32.4912 0.943512 34.201 2.56589C35.8459 4.25667 36.7077 6.60154 36.7864 9.60051C36.9578 16.1316 32.7166 22.2449 24.063 27.9405Z" fill="white"/>
        </svg>
      {% endif %}
    </div>
  </div>
  <div class="px-[21px] py-[16px] grow flex flex-col justify-between">
    <div class="mb-[16px] font-mono text-[24px] leading-[27px]">
      {{ title_prefix }}
      <a class="after:absolute after:inset-x-0 after:inset-y-0 z-50" href="{{ url }}" target="{{ article_type == 'video' ? '_blank' : '_self' }}">{{ label }}</a>
      {{ title_suffix }}
    </div>
    <div{{ attributes }}>
      <div{{ content_attributes }}>
        {{ content|without('hero') }}
      </div>
    </div>
    {% if node.duration.value is not empty %}
      <div class="mt-[16px] text-[14px] leading-[27px]">
        {{ article_type == 'video' ? 'Video • ' ~ node.duration.value ~ ' watch' :  'Blog • ' ~ node.duration.value ~ ' read'  }}
      </div>
    {% endif %}
  </div>
</div>
